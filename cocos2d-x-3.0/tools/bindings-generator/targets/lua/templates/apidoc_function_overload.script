--------------------------------
#set $max_arg_count     = 0
#set $func_count    = 0
#set $func_index    = 0
#set $max_arg_func  = 0
#for func in $implementations
    #if len($func.arguments) >= $max_arg_count
        #set $max_arg_count = len($func.arguments)
        #set $max_arg_func = func
    #end if
    #set $func_tip = "overload function: " + $func_name + "("
    #if len($func.arguments) >= $func.min_args
        #set $arg_count = len($func.arguments)
        #if $arg_count >0 
            #set $arg_index = 0
            #for $arg in func.arguments
                #if $arg_index < $arg_count - 1
                    #set $func_tip = $func_tip + $generator.lua_typename_from_natve($arg.namespaced_name) + ", "
                #else
                    #set $func_tip = $func_tip + $generator.lua_typename_from_natve($arg.namespaced_name)
                #end if
                #set $arg_index = arg_index + 1
            #end for
        #end if 
    #end if
    #set $func_tip =  $func_tip + ")"
-- $func_tip
--          
    #set $func_index = $func_index + 1
#end for
-- @function [parent=#${class_name}] ${func_name}
-- @param self
#if $max_arg_count > 0
    #set $arg_index = 0
    #for $arg in $max_arg_func.arguments
-- @param #$generator.lua_typename_from_natve($arg.namespaced_name) $generator.api_param_name_from_native($arg.name.replace("*", "").replace("const ", ""))
    #end for
#end if
#if str($max_arg_func.ret_type) != "void"
-- @return $generator.lua_typename_from_natve(max_arg_func.ret_type.namespaced_name, True)#$generator.lua_typename_from_natve(max_arg_func.ret_type.namespaced_name, True) ret (retunr value: $generator.lua_typename_from_natve(max_arg_func.ret_type.namespaced_name))
#end if

